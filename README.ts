#!/usr/bin/env -S deno run --allow-read --allow-run=bash,git,cargo --allow-env --allow-sys

import * as zx from 'npm:zx'
import { z, ZodSchema } from 'https://deno.land/x/zod@v3.23.8/mod.ts'
import { assertEquals } from 'https://jsr.io/@std/assert/1.0.0/equals.ts'

const CargoToml = z.object({
  package: z.object({
    name: z.string().min(1),
    description: z.string().min(1),
    repository: z.string().url().min(1),
    metadata: z.object({
      details: z.object({
        title: z.string().min(1),
        tagline: z.string(),
        summary: z.string(),
      }),
    }),
  }),
})

type CargoToml = z.infer<typeof CargoToml>;

const Repo = z.object({
  url: z.string().url(),
})

type Repo = z.infer<typeof Repo>;

const $ = zx.$({
  cwd: import.meta.dirname,
})
const parse = <T>(schema: ZodSchema<T>, input: { toString: () => string }) => schema.parse(JSON.parse(input.toString()))
const renderMarkdownList = (items: string[]) => items.map(bin => `* ${bin}`).join('\n')

const theCargoToml: CargoToml = parse(CargoToml, await $`yj -t < Cargo.toml`)
const { package: { name, description, metadata: { details: { title } } } } = theCargoToml
const bin = name
const help = await $`cargo run --quiet --bin ${bin} -- --help`
const repo: Repo = parse(Repo, await $`gh repo view --json url`)
const extraBins = (await $`find src/bin/*.rs -type f -exec basename {} .rs \\;`).valueOf().split('\n')

assertEquals(repo.url, theCargoToml.package.repository)

const autogenerated = `
<!-- DO NOT EDIT -->
<!-- This file is automatically generated by README.ts. -->
<!-- Edit README.ts if you want to make changes. -->
`.trim()

console.info(`
${autogenerated}

# ${title}

[![Build](${repo.url}/actions/workflows/ci.yml/badge.svg)](${repo.url})
[![Documentation](https://docs.rs/${name}/badge.svg)](https://docs.rs/${name})

## Overview

${description}

## Examples

\`\`\`shell
# Create a GitHub repo & init a Rust project
${bin} --name my-new-project
 
# Copy configs from existing project
${bin} --name my-new-project --copy-configs-from ~/workspace/my-existing-project

# Clone to a specific directory
${bin} --name my-new-project --dir ~/workspace/my-new-project

# Create a public repo
${bin} --name my-new-project --repo-create-cmd "gh repo create --public {{name}}"

# Create a lib instead of bin
${bin} --name my-new-project --project-init-cmd "cargo init --lib"
\`\`\`

## Features

* [x] Uses existing \`gh\`, \`git\`, \`cargo\` commands
* [x] Supports overrides for all commands
* [x] Supports substitutions (see help below)
* [x] Can be used as a library

## Installation

\`\`\`shell
cargo install ${name}
\`\`\`

## Usage

\`\`\`
${help.stdout.trim()}
\`\`\`

## Additional binaries

${renderMarkdownList(extraBins.map(bin => `\`${bin}\``))}

## Gratitude

Like the project? [Say thanks](${repo.url})! ❤️

## License

[Apache License 2.0](LICENSE-APACHE) or [MIT License](LICENSE-MIT) at your option.

Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.
`.trim())
