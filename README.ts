#!/usr/bin/env -S deno run --allow-read --allow-run=bash,git,cargo --allow-env --allow-sys

import * as zx from 'npm:zx'

interface CargoToml {
  package: {
    name: string,
    description: string
  }
}

interface Repo {
  url: string
}

const $ = zx.$({
  cwd: import.meta.dirname
})

const parse = (input: { toString: () => string }) => JSON.parse(input.toString())
const renderMarkdownList = (items: string[]) => items.map(bin => `* ${bin}`).join('\n')

const theCargoToml: CargoToml = parse(await $`yj -t < Cargo.toml`)
const name = theCargoToml.package.name
const bin = name
const description = theCargoToml.package.description
const help = await $`cargo run --quiet --bin ${bin} -- --help`
const repo: Repo = parse(await $`gh repo view --json url`)
const extraBins = (await $`find src/bin/*.rs -type f -exec basename {} .rs \\;`).valueOf().split("\n")

const autogenerated = `
<!-- DO NOT EDIT -->
<!-- This file is automatically generated by README.ts. -->
<!-- Edit README.ts if you want to make changes. -->
`.trim()

console.info(`
${autogenerated}

# Create Rust GitHub repo

[![Build](${repo.url}/actions/workflows/ci.yml/badge.svg)](${repo.url})
[![Documentation](https://docs.rs/${name}/badge.svg)](https://docs.rs/${name})

## Overview

${description}

## Examples

\`\`\`shell
# Create a GitHub repo & init a Rust project
${bin} --name my-new-project
 
# Copy configs from existing project
${bin} --name my-new-project --copy-configs-from ~/workspace/my-existing-project

# Clone to a specific directory
${bin} --name my-new-project --dir ~/workspace/my-new-project

# Create a public repo
${bin} --name my-new-project --public

# Create a lib instead of bin
${bin} --name my-new-project --cargo-init-args '--lib'
\`\`\`

## Features

* Uses existing \`gh\`, \`git\`, \`cargo\` commands
* Forwards the flags to commands
* Can be used as a library

## Installation

\`\`\`shell
cargo install ${name}
\`\`\`

## Usage

\`\`\`
${help.stdout.trim()}
\`\`\`

## Additional binaries

${renderMarkdownList(extraBins.map(bin => `\`${bin}\``))}

## License

[Apache License 2.0](LICENSE-APACHE) or [MIT License](LICENSE-MIT) at your option.

Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.
`.trim())
